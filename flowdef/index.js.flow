// @flow
// tslint:disable

type StateUpdater<State> = State | ((prevState: State) => State);

type InitHandler<PluginConfig: {}, PluginState> = (
  context: IPluginContext<PluginConfig, PluginState>,
) => void | (() => mixed);

type MethodHandler<PluginConfig: {}, PluginState> = (
  context: IPluginContext<PluginConfig, PluginState>,
  ...args: any[]
) => any;

// NOTE: "EventHandler" collides with a global type
type PluginEventHandler<PluginConfig: {}, PluginState> = (
  context: IPluginContext<PluginConfig, PluginState>,
  ...args: any[]
) => void;

type StateHandler<PluginConfig: {}, PluginState> = (
  context: IPluginContext<PluginConfig, PluginState>,
) => void;

type IPluginConfigs = {
  [pluginName: string]: { [attr: string]: any },
};

type IPluginStates = {
  [pluginName: string]: any,
};

type ILoadPluginsOpts = {
  config?: IPluginConfigs,
  state?: IPluginStates,
};

export type IPlugin = {
  name: string,
  enabled: boolean,
  defaultConfig: {},
  initialState: any,
  initHandlers: Array<InitHandler<any, any>>,
  methodHandlers: Array<{
    methodName: string,
    handler: MethodHandler<any, any>,
  }>,
  eventHandlers: Array<{
    eventPath: string,
    handler: PluginEventHandler<any, any>,
  }>,
  stateHandlers: Array<StateHandler<any, any>>,
};

type IPlugins = {
  [plugiName: string]: IPlugin,
};

type PluginChangeHandler = (plugins: IPlugins) => mixed;

export type IPluginDef<PluginConfig: {}, PluginState> = {
  name: string,
  enabled?: boolean,
  defaultConfig?: PluginConfig,
  initialState?: PluginState,
};

export type IPluginContext<PluginConfig: {}, PluginState> = {
  getConfig: () => PluginConfig,
  getConfigOf: (pluginName: string) => { [attr: string]: any },
  getState: () => PluginState,
  getStateOf: (pluginName: string) => any,
  setState: (change: StateUpdater<PluginState>, cb?: () => mixed) => void,
  callMethod: (methodPath: string, ...args: Array<any>) => any,
  emitEvent: (eventName: string, ...args: Array<any>) => void,
};

export type IPluginApi<PluginConfig: {}, PluginState> = {
  init: (handler: InitHandler<PluginConfig, PluginState>) => void,
  method: (
    methodName: string,
    handler: MethodHandler<PluginConfig, PluginState>,
  ) => void,
  on: (
    eventPath: string,
    handler: PluginEventHandler<PluginConfig, PluginState>,
  ) => void,
  onState: (handler: StateHandler<PluginConfig, PluginState>) => void,
};

declare export function resetPlugins(): void;

declare export function registerPlugin<PluginConfig: {}, PluginState>(
  pluginDef: IPluginDef<PluginConfig, PluginState>,
): IPluginApi<PluginConfig, PluginState>;

declare export function loadPlugins(
  opts?: ILoadPluginsOpts,
  onLoad?: () => mixed,
): void;

declare export function getPlugins(): IPlugins;

declare export function onPluginChange(
  handler: PluginChangeHandler,
): () => void;
